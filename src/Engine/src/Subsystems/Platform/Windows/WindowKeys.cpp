#include <windows.h>

#include "Core.h"
#include "Subsystems/Events/KeyEvents/EventKeyPress.h"
#include "Subsystems/Platform/Windows/WindowKeys.h"

namespace ERI
{

enum Keys WindowKeys::translateKey(u16 winKey)
{
    switch(winKey)
    {
        case VK_BACK:
            return Keys::BackSpace;
        case VK_TAB:
            return Keys::Tab;
        case VK_RETURN:
            return Keys::Enter;
        case VK_SHIFT:
            return Keys::Shift;
        case VK_CONTROL:
            return Keys::Control;
        case VK_MENU:
            return Keys::Alt;
        case VK_CAPITAL:
            return Keys::CapsLock;
        case VK_ESCAPE:
            return Keys::Escape;
        case VK_SPACE:
            return Keys::Space;
        case VK_PRIOR:
            return Keys::PageUp;
        case VK_NEXT:
            return Keys::PageDown;
        case VK_END:
            return Keys::End;
        case VK_HOME:
            return Keys::Home;
        case VK_LEFT:
            return Keys::ArrowLeft;
        case VK_UP:
            return Keys::ArrowUp;
        case VK_RIGHT:
            return Keys::ArrowRight;
        case VK_DOWN:
            return Keys::ArrowDown;
        case VK_SNAPSHOT:
            return Keys::PrintScreen;
        case VK_INSERT:
            return Keys::Insert;
        case VK_DELETE:
            return Keys::Delete;
        case 0x30:
            return Keys::Zero;
        case 0x31:
            return Keys::One;
        case 0x32:
            return Keys::Two;
        case 0x33:
            return Keys::Three;
        case 0x34:
            return Keys::Four;
        case 0x35:
            return Keys::Five;
        case 0x36:
            return Keys::Six;
        case 0x37:
            return Keys::Seven;
        case 0x38:
            return Keys::Eight;
        case 0x39:
            return Keys::Nine;
        case 0x41:
            return Keys::A;
        case 0x42:
            return Keys::B;
        case 0x43:
            return Keys::C;
        case 0x44:
            return Keys::D;
        case 0x45:
            return Keys::E;
        case 0x46:
            return Keys::F;
        case 0x47:
            return Keys::G;
        case 0x48:
            return Keys::H;
        case 0x49:
            return Keys::I;
        case 0x4A:
            return Keys::J;
        case 0x4B:
            return Keys::K;
        case 0x4C:
            return Keys::L;
        case 0x4D:
            return Keys::M;
        case 0x4E:
            return Keys::N;
        case 0x4F:
            return Keys::O;
        case 0x50:
            return Keys::P;
        case 0x51:
            return Keys::Q;
        case 0x52:
            return Keys::R;
        case 0x53:
            return Keys::S;
        case 0x54:
            return Keys::T;
        case 0x55:
            return Keys::U;
        case 0x56:
            return Keys::V;
        case 0x57:
            return Keys::W;
        case 0x58:
            return Keys::X;
        case 0x59:
            return Keys::Y;
        case 0x5A:
            return Keys::Z;
        case VK_LWIN:
        case VK_RWIN:
            return Keys::Super;
        case VK_NUMPAD0:
            return Keys::NumZero;
        case VK_NUMPAD1:
            return Keys::NumOne;
        case VK_NUMPAD2:
            return Keys::NumTwo;
        case VK_NUMPAD3:
            return Keys::NumThree;
        case VK_NUMPAD4:
            return Keys::NumFour;
        case VK_NUMPAD5:
            return Keys::NumFive;
        case VK_NUMPAD6:
            return Keys::NumSix;
        case VK_NUMPAD7:
            return Keys::NumSeven;
        case VK_NUMPAD8:
            return Keys::NumEight;
        case VK_NUMPAD9:
            return Keys::NumNine;
        case VK_MULTIPLY:
            return Keys::NumMultiply;
        case VK_ADD:
            return Keys::NumAdd;
        case VK_SUBTRACT:
            return Keys::NumMinus;
        case VK_DECIMAL:
            return Keys::NumDot;
        case VK_DIVIDE:
            return Keys::NumDivide;
        case VK_NUMLOCK:
            return Keys::NumsLock;
        case VK_F1:
            return Keys::FuncOne;
        case VK_F2:
            return Keys::FuncTwo;
        case VK_F3:
            return Keys::FuncThree;
        case VK_F4:
            return Keys::FuncFour;
        case VK_F5:
            return Keys::FuncFive;
        case VK_F6:
            return Keys::FuncSix;
        case VK_F7:
            return Keys::FuncSeven;
        case VK_F8:
            return Keys::FuncEight;
        case VK_F9:
            return Keys::FuncNine;
        case VK_F10:
            return Keys::FuncTen;
        case VK_F11:
            return Keys::FuncEleven;
        case VK_F12:
            return Keys::FuncTwelve;
        // These are keyboard specific? I think I have a normal american keyboard ~_~
        // http://www.kbdedit.com/manual/low_level_vk_list.html
        case VK_OEM_1:
            return Keys::SemiColon;
        case VK_OEM_PLUS:
            return Keys::Equals;
        case VK_OEM_COMMA:
            return Keys::Comma;
        case VK_OEM_MINUS:
            return Keys::Minus;
        case VK_OEM_PERIOD:
            return Keys::Period;
        case VK_OEM_2:
            return Keys::FrontSlash;
        case VK_OEM_3:
            return Keys::Grave;
        case VK_OEM_4:
            return Keys::LeftBracket;
        case VK_OEM_5:
            return Keys::BackSlash;
        case VK_OEM_6:
            return Keys::RightBracket;
        case VK_OEM_7:
            return Keys::Apostrophe;
        default:
            return Keys::MAX;
    }
}

} // namespace ERI